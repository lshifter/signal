import openai
import base64
from fastapi import FastAPI, File, UploadFile, Form
from fastapi.middleware.cors import CORSMiddleware
import json
import random

app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # —É–∫–∞–∂–∏ –¥–æ–º–µ–Ω —Ñ—Ä–æ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞!
    allow_methods=["*"],
    allow_headers=["*"],
)

openai.api_key = "sk-...–¢–í–û–ô_–ö–õ–Æ–ß..."

DISCLAIMER = (
    "‚ö†Ô∏è –î–∏—Å–∫–ª–µ–π–º–µ—Ä: –®–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞ 86%. –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º —á–µ—Å—Ç–Ω–æ, –Ω–æ –ø–æ–º–Ω–∏ –æ —Ä–∏—Å–∫–∞—Ö. "
    "–í—Å–µ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—à—å —Ç—ã —Å–∞–º. –ù–µ –Ω–∞—Ä—É—à–∞–π –∑–∞–∫–æ–Ω—ã —Å–≤–æ–µ–π —Å—Ç—Ä–∞–Ω—ã!"
)

def generate_aviator_signal():
    n = random.randint(10, 50)
    coeffs = []
    last = 1.2
    for i in range(n):
        if i % 5 == 0 and i != 0:
            last = round(last + 0.1, 2)
        coeffs.append(f"–ó–∞–±–µ—Ä–∏ –Ω–∞ x{last}")
    coeffs_text = "<br>".join(f"‚Ä¢ {x}" for x in coeffs[:10])
    return (
        f"‚úàÔ∏è <b>–°–∏–≥–Ω–∞–ª –¥–ª—è AviaMaster</b><br>"
        f"1Ô∏è‚É£ –°–¥–µ–ª–∞–π {n} –∏–≥—Ä —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –¥–µ–ø–æ–∑–∏—Ç–æ–º<br>"
        f"2Ô∏è‚É£ –í –∫–∞–∂–¥–æ–π –∏–≥—Ä–µ –∑–∞–±–∏—Ä–∞–π –Ω–∞ –Ω–∏–∑–∫–∏—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞—Ö:<br>{coeffs_text}<br>"
        f"3Ô∏è‚É£ –ü–æ—Å–ª–µ –≤—ã–∏–≥—Ä—ã—à–∞ ‚Äî —Å—Ç–æ–ø<br><br>"
        f"{DISCLAIMER}"
    )

def generate_chicken_signal():
    jumps = random.randint(6, 9)
    attempts = random.randint(10, 30)
    return (
        f"üêî <b>–°–∏–≥–Ω–∞–ª –¥–ª—è Checken Road</b><br>"
        f"1Ô∏è‚É£ –°–¥–µ–ª–∞–π {attempts} –∑–∞—Ö–æ–¥–æ–≤ –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–∞–≤–∫–µ<br>"
        f"2Ô∏è‚É£ –í –∫–∞–∂–¥–æ–º –∑–∞—Ö–æ–¥–µ –¥–µ–ª–∞–π —Ä–æ–≤–Ω–æ {jumps} –ø—Ä—ã–∂–∫–æ–≤ (—ç—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è)<br>"
        f"3Ô∏è‚É£ –ö–∞–∫ —Ç–æ–ª—å–∫–æ —Å–ª–æ–≤–∏–ª –≤—ã–∏–≥—Ä—ã—à ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏—Å—å!<br><br>"
        f"{DISCLAIMER}"
    )

@app.post("/analyze/")
async def analyze(file: UploadFile = File(...), game: str = Form(...)):
    img_bytes = await file.read()
    img_b64 = base64.b64encode(img_bytes).decode()
    img_mime = file.content_type
    image_url = f"data:{img_mime};base64,{img_b64}"

    prompt = (
        f"–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–∑–∞—Ä—Ç–Ω—ã–º –∏–≥—Ä–∞–º. "
        f"–ü—Ä–æ–≤–µ—Ä—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º –∏–∑ –∏–≥—Ä—ã '{game}'. "
        f"–û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ JSON: {{'match': true}} –µ—Å–ª–∏ —ç—Ç–æ —è–≤–Ω–æ —Å–∫—Ä–∏–Ω—à–æ—Ç —ç—Ç–æ–π –∏–≥—Ä—ã, "
        f"–∏–ª–∏ {{'match': false}} –µ—Å–ª–∏ –Ω–µ—Ç. –ù–µ –ø–∏—à–∏ –Ω–∏—á–µ–≥–æ –∫—Ä–æ–º–µ JSON."
    )

    response = openai.chat.completions.create(
        model="gpt-4o",
        messages=[
            {"role": "system", "content": prompt},
            {
                "role": "user",
                "content": [
                    {"type": "text", "text": "–ü—Ä–æ–≤–µ—Ä—å –∏–≥—Ä—É –ø–æ —Å–∫—Ä–∏–Ω—à–æ—Ç—É:"},
                    {"type": "image_url", "image_url": {"url": image_url}}
                ],
            }
        ],
        max_tokens=100,
        temperature=0.1,
    )
    result = response.choices[0].message.content.strip()
    try:
        match = json.loads(result).get("match", False)
    except Exception:
        match = False

    if not match:
        return {"error": "–°–∫—Ä–∏–Ω—à–æ—Ç –Ω–µ –ø–æ—Ö–æ–∂ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –∏–≥—Ä—É. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω –∏–∑ –∏–≥—Ä—ã!"}

    if game == "Checken Road":
        signal = generate_chicken_signal()
    elif game == "AviaMaster":
        signal = generate_aviator_signal()
    else:
        signal = "–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∏–≥—Ä–∞."
    return {"signal": signal}
